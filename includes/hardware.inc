* -*-asm-*-
* Mathe-Register
* A = C * E
* A : B = D + R/2
*
MATHE_A         EQU $FC60
MATHE_B         EQU $FC56
MATHE_C         EQU $FC52
MATHE_D         EQU $FC52
MATHE_E         EQU $FC54
MATHE_AKKU      EQU $FC6C
MATHE_R         EQU $FC6C

* Atari-definitions for co-pro registers
MATHD           EQU $FC52
MATHC           EQU $FC53
MATHB           EQU $FC54
MATHA           EQU $FC55
MATHP           EQU $FC56
MATHN           EQU $FC57
MATHH           EQU $FC60
MATHG           EQU $FC61
MATHF           EQU $FC62
MATHE           EQU $FC63
MATHM           EQU $FC6c
MATHL           EQU $FC6d
MATHK           EQU $FC6e
MATHJ           EQU $FC6f

VIDBAS		EQU $FC08
COLLBAS		EQU $FC0A
SCBNEXT         EQU $FC10
COLLOFF		EQU $FC24

SUZY_BUS_ENABLE EQU $FC90       ; 0 disables Suzy
SPRGO           EQU $FC91
SPRSYS          EQU $FC92

* Initialised to %00100100
* Copy is in _SPRSYS in der ZP

* WRITE
SIGNED_MATH     EQU %10000000
USE_AKKU        EQU %01000000
DONT_COLLIDE    EQU %00100000   ;*
VERT_STRETCH    EQU %00010000
FLIP_JOYPAD     EQU %00001000
CLR_UNSAFE      EQU %00000100   ;*
STOP_SPRITE     EQU %00000010
RESERVED        EQU %00000001
;READ
COMPUTING       EQU %10000000
AKKU_OVERFLOW   EQU %01000000
LAST_CARRY      EQU %00100000
;VERT_STRETCH   EQU %00010000
;FLIP_JOYPAD    EQU %00001000
UNSAFE_ACCESS   EQU %00000100
RESERVED2       EQU %00000010
SUZY_DONE       EQU %00000001

SPRCTL0_2_COL             EQU $00
SPRCTL0_4_COL             EQU $40
SPRCTL0_8_COL             EQU $80
SPRCTL0_16_COL            EQU $c0
SPRCTL0_HFLIP             EQU $20
SPRCTL0_VFLIP             EQU $10
SPRCTL0_SHADOW            EQU $07
SPRCTL0_XOR_SHADOW        EQU $06
SPRCTL0_NON_COLLIDABLE    EQU $05
SPRCTL0_NORMAL            EQU $04
SPRCTL0_BOUNDARY          EQU $03
SPRCTL0_BOUNDARY_SHADOW   EQU $02
SPRCTL0_BACKGROUND_NON_COLLIDABLE EQU $01
SPRCTL0_BACKGROUND_SHADOW EQU $00

SPRCTL1_LITERAL           EQU $80
SPRCTL1_DEPTH_NO_RELOAD   EQU $00
SPRCTL1_DEPTH_SIZE_RELOAD EQU $10
SPRCTL1_DEPTH_SIZE_STRETCH_RELOAD EQU $20
SPRCTL1_DEPTH_ALL_RELOAD  EQU $30
SPRCTL1_PALETTE_NO_RELOAD EQU $08
SPRCTL1_SKIP              EQU $04
SPRCTL1_DRAW_UP           EQU $02
SPRCTL1_DRAW_LEFT         EQU $01

SPRCOLL_DONT_COLLIDE      EQU $20

JOYPAD          EQU $FCB0
JOY_UP          EQU %10000000
JOY_DOWN        EQU %01000000
JOY_LEFT        EQU %00100000
JOY_RIGHT       EQU %00010000
JOY_OPT1        EQU %00001000
JOY_OPT2        EQU %00000100
JOY_B           EQU %00000010
JOY_A           EQU %00000001

SUZY_IO         EQU $FCB1
JOY_PAUSE       EQU %00000001
SW_CON          EQU %00000100

CART0           EQU $FCB2
CART1           EQU $FCB3

RCART0          EQU $FCB2
RCART1          EQU $FCB3

***************
* Mikey
***************
; timer/counter
TIMER0	EQU $FD00
TIMER1	EQU $FD04
TIMER2	EQU $FD08
TIMER3	EQU $FD0C
TIMER4	EQU $FD10
TIMER5	EQU $FD14
TIMER6	EQU $FD18
TIMER7	EQU $FD1C


HCOUNTER	EQU TIMER0
VCOUNTER	EQU TIMER2
SERIALRATE	EQU TIMER4

; for every timer
TIM_BAKUP	EQU 0	; backup-value (count+1)
TIM_CNTRL1	EQU 1	; timer-control register
TIM_CNT	EQU 2	; current counter
TIM_CNTRL2	EQU 3	; dynamic control

; TIM_CNTRL1
TIM_IRQ	EQU %10000000	; enable interrupt (not TIMER4 !)
TIM_RESETDONE	EQU %01000000	; reset timer done
TIM_MAGMODE	EQU %00100000	; nonsense in Lynx !!
TIM_RELOAD	EQU %00010000	; enable reload
TIM_COUNT	EQU %00001000	; enable counter
TIM_LINK	EQU %00000111
; link timers (0->2->4 / 1->3->5->7->Aud0->Aud1->Aud2->Aud3->1
TIM_64us	EQU %00000110
TIM_32us	EQU %00000101
TIM_16us	EQU %00000100
TIM_8us	EQU %00000011
TIM_4us	EQU %00000010
TIM_2us	EQU %00000001
TIM_1us	EQU %00000000

;TIM_CNTRL2 (read-only)
; B7..B4 unused
TIM_DONE	EQU %00001000	; set if timer's done; reset with TIM_RESETDONE
TIM_LAST	EQU %00000100	; last clock (??)
TIM_BORROWIN	EQU %00000010
TIM_BORROWOUT	EQU %00000001

; Audio registers

AUDIO_A	EQU $FD20
AUDIO_B	EQU $FD28
AUDIO_C	EQU $FD30
AUDIO_D	EQU $FD38

VOLUME_CNTRL	EQU 0
FEEDBACK_ENABLE EQU 1	; enables 11/10/5..0
OUTPUT_VALUE	EQU 2
SHIFTER_L	EQU 3
AUD_BAKUP	EQU 4
AUD_CNTRL1	EQU 5
AUD_COUNT	EQU 6
AUD_CNTRL2	EQU 7

; AUD_CNTRL1
FEEDBACK_7	EQU %10000000
AUD_RESETDONE	EQU %01000000
AUD_INTEGRATE	EQU %00100000
AUD_RELOAD	EQU %00010000
AUD_CNTEN	EQU %00001000
AUD_LINK	EQU %00000111
; link timers (0->2->4 / 1->3->5->7->Aud0->Aud1->Aud2->Aud3->1
AUD_64us	EQU %00000110
AUD_32us	EQU %00000101
AUD_16us	EQU %00000100
AUD_8us	EQU %00000011
AUD_4us	EQU %00000010
AUD_2us	EQU %00000001
AUD_1us	EQU %00000000

; AUD_CNTRL2 (read only)
; B7..B4	; shifter bits 11..8
; B3	; who knows
; B2	; last clock state (0->1 causes count)
; B1	; borrow in (1 causes count)
; B0	; borrow out (count EQU 0 and borrow in)

ATTEN_A	EQU $FD40
ATTEN_B	EQU $FD41
ATTEN_C	EQU $FD42
ATTEN_D	EQU $FD43
; B7..B4 attenuation left ear (0 silent ..15/16 volume)
; B3..B0      -''-   right ear

MPAN	EQU $FD44
; B7..B4 left ear
; B3..B0 right ear
; B7/B3 EQU Audio D
; a 1 enables attenuation for channel and side


MSTEREO	EQU $FD50	; a 1 disables audio connection
AUD_D_LEFT	EQU %10000000
AUD_C_LEFT	EQU %01000000
AUD_B_LEFT	EQU %00100000
AUD_A_LEFT	EQU %00010000
AUD_D_RIGHT	EQU %00001000
AUD_C_RIGHT	EQU %00000100
AUD_B_RIGHT	EQU %00000010
AUD_A_RIGHT	EQU %00000001

VOLUME_A        EQU $FD20
FEEDBACK_A      EQU $FD21
OUTPUTVAL_A     EQU $FD22
SHIFT_A         EQU $FD23
FREQ_A          EQU $FD24
CONTRL_A        EQU $FD25
COUNTER_A       EQU $FD26
OTHER_A         EQU $FD27

VOLUME_B        EQU $FD28
FEEDBACK_B      EQU $FD29
OUTPUTVAL_B     EQU $FD2a
SHIFT_B         EQU $FD2b
FREQ_B          EQU $FD2c
CONTRL_B        EQU $FD2d
COUNTER_B       EQU $FD2e
OTHER_B         EQU $FD2f

VOLUME_C        EQU $FD30
FEEDBACK_C      EQU $FD31
OUTPUTVAL_C     EQU $FD32
SHIFT_C         EQU $FD33
FREQ_C          EQU $FD34
CONTRL_C        EQU $FD35
COUNTER_C       EQU $FD36
OTHER_C         EQU $FD37

VOLUME_D        EQU $FD38
FEEDBACK_D      EQU $FD39
OUTPUTVAL_D     EQU $FD3a
SHIFT_D         EQU $FD3b
FREQ_D          EQU $FD3c
CONTRL_D        EQU $FD3d
COUNTER_D       EQU $FD3e
OTHER_D         EQU $FD3f


BALANCE_A       EQU $FD40
BALANCE_B       EQU $FD41
BALANCE_C       EQU $FD42
BALANCE_D       EQU $FD43

PANING          EQU $FD44

STEREO_CNTRL    EQU $FD50

INTRST          EQU $FD80
INTSET          EQU $FD81 	;Interrupt Poll 1, (R/W)
;;; Read is a poll, write will set the int that corresponds to a set bit.
INTSET_TIMER7   EQU $80
INTSET_TIMER6   EQU $40
INTSET_TIMER5   EQU $20
INTSET_SERIAL   EQU $10
INTSET_TIMER3   EQU $08
INTSET_TIMER2   EQU $04
INTSET_VBK      EQU $04
INTSET_TIMER1   EQU $02
INTSET_TIMER0   EQU $01
INTSET_HBL      EQU $01

AUDIN           EQU $FD86	;B7 = Audio in comparator

SYSCTL1         equ $FD87
SYSCTL1_POWERON EQU $2
SYSCTL1_STROBE  EQU 1		;Cart Address Strobe (also counter reset)

IODIR           EQU $FD8A
IODAT           EQU $FD8B
SERCTL          EQU $FD8C
SERDAT          EQU $FD8D

SERCTL_TXINTEN  EQU $80
SERCTL_RXINTEN  EQU $40
SERCTL_PAREN    EQU $10
SERCTL_RESETERR EQU $08
SERCTL_TXOPEN   EQU $04
SERCTL_TXBRK    EQU $02
SERCTL_PAREVEN  EQU $01

SERCTL_TXRDY    EQU $80
SERCTL_RXRDY    EQU $40
SERCTL_TXEMPTY  EQU $20
SERCTL_PARERR   EQU $10
SERCTL_OVERRUN  EQU $08
SERCTL_FRAMERR  EQU $04
SERCTL_RXBRK    EQU $02
SERCTL_PARBIT   EQU $01

SDONEACK        EQU $FD90
CPUSLEEP        EQU $FD91
VIDEODMA        EQU $FD92
PBKUP           EQU $FD93
DISPADRL        EQU $FD94
DISPADRH        EQU $FD95
***************
